#!/usr/bin/env python3


from sys import exit
from collections import namedtuple

"""  
* Variable properties:
    * name (identifier)
    * type (int, char, boolean, class name)
    * kind (field, static, local, argument)
    * index (0, 1, 2, ...)
    * scope (class level, subroutine level)
    
* class-level symbol table (field, static)
* subroutine-level symbol table (argument, local).

* In methods only (not in function or constructors):
    * in addition to the explicit arguments, if any, there is always an implicit argument:
        argument 0 is always named this, and its type is the class name.
    * generated by the compiler

* Every time the compiler detects a variable in some statement or expression, 
    it looks up the variable in the subroutine-level symbol table, if not found,
    it looks it up in the class-level symbol table.
    
"""

# variable properties
VP = namedtuple("VP", ["name", "type", "kind", "index"])


class ST:
    def __init__(self):
        self.entries = dict()
        self.fieldIndex = 0
        self.staticIndex = 0
        self.argumentIndex = 0
        self.localIndex = 0

    def __contains__(self, item):
        return item in self.entries

    def __len__(self):
        return len(self.entries)

    def n_fields(self):
        return self.fieldIndex

    def n_statics(self):
        return self.staticIndex

    def n_arguments(self):
        return self.argumentIndex

    def n_locals(self):
        return self.localIndex

    def get(self, variable):
        return self.entries[variable]

    def add(self, name, type, kind):
        if kind == 'field':
            self.entries[name] = VP(name=name, type=type, kind='this', index=self.fieldIndex)
            self.fieldIndex = self.fieldIndex + 1
        elif kind == 'static':
            self.entries[name] = VP(name=name, type=type, kind=kind, index=self.staticIndex)
            self.staticIndex = self.staticIndex + 1
        elif kind == 'argument':
            self.entries[name] = VP(name=name, type=type, kind=kind, index=self.argumentIndex)
            self.argumentIndex = self.argumentIndex + 1
        elif kind == 'local':
            self.entries[name] = VP(name=name, type=type, kind=kind, index=self.localIndex)
            self.localIndex = self.localIndex + 1
        else:
            assert False


def main():
    return 0


if __name__ == "__main__":
    exit(main())
